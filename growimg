#!/bin/sh
#
# chris@nmedia.net
#
# This is an example of how to create a new image, transfer the contents
# of an old image to it, and keep the user from screwing it up too bad, by
# performing some basic sanity checks.
#
# -t target-disk causes this script to write directly to a disk instead of
# a new VND image.  This may be useful if you want to write a small image
# to a large flash without overwriting the unused space (which can be rather
# slow).  This is as fast as running flashrd, without requiring
# the source files from flashrd.
#
# This script tries to keep everything scaled to sectors, so we are less
# likely to hit the 32 bit (2^32) boundary on shell variable values (amd64
# users have no such problem.)  The sanity checks fail completely on i386
# if the source image is larger than 4GB.
#
# The previous version of this script used growfs.  Unfortunately the
# superblock locations change radically going from, say, 32 sec/trk to 63 s/t.
# The change is too much for growfs or fsck to grok.  Our new approach is to
# create a new image, copy the data over with tar, and recreate the boot
# blocks.  A side benefit of this approach is that we can also shrink images
# now.
#

unset alt

uname=`uname -s`

if [ "$uname" != "OpenBSD" -a "$uname" != "Bitrig" ]; then
 echo Sorry, cowboy.  This script only runs on OpenBSD and similar systems.
 exit 1
fi

if [ `id -u` != 0 ]; then
 echo Sorry, mount, vnconfig, and friends require root privileges
 exit 1
fi

syntax()
{
  echo "growimg can operate in disk target mode by specifying the destination disk or it"
  echo "can create a new, resized image."
  echo
  echo "syntax: growimg <-t target-disk> <source-image-filename>"
  echo "    or: growimg <cyls> <heads> <sectors> <source-image-filename>"
}

islezero()
{
  if [ "$1" -le "0" ]; then
   syntax
   echo -n expected a value larger than 0, got \"$1\"
   if [ "$2" != "" ]; then
    echo " for $2"
   else
    echo
   fi
   exit 1
  fi
}

if [ "$1" == "-t" ]; then
 # target device specified, use its geometry
 device="$2"
 alt=/dev/"$2"c
 if [ ! -b $alt ]; then
  echo "${device}(${alt}) is an invalid disk device, not found or not block device"
  exit 1
 fi

 image=$3
else
 # geometry specified, write a new image file
 if [ ! -f "$4" ]; then
  syntax
  exit 1
 fi

 islezero $1 cylinders
 islezero $2 heads
 islezero $3 sectors

 image=$4
fi

if [ ! -f $image ]; then
  echo "Error: ${image} not found"
  exit 1
fi

biosboot=/usr/mdec/biosboot
mbr=/usr/mdec/mbr

if [ -z "$device" ]; then
 device=vnd0
fi
device2=vnd1

if [ -z "$alt" ]; then
 cylinders=$1
 trackscylinder=$2
 sectorstrack=$3
 bytessec=512
 totalsize=$((cylinders * trackscylinder * sectorstrack))
 sectorscylinder=$((totalsize / cylinders))
else
 # Here we use disklabel as a way to grab these values. Later versions of OpenBSD
 # always report the actual kernel-detected values and not the on-disk values

 tmplabel=`mktemp -t growimg.XXXXXX`
 disklabel $device > $tmplabel

 totalsize=`awk -F: ' /^total sectors:/ {print $2} ' $tmplabel`
 bytessec=`awk -F: ' /^bytes\/sector:/ {print $2} ' $tmplabel`
 sectorstrack=`awk -F: ' /^sectors\/track:/ {print $2} ' $tmplabel`
 sectorscylinder=`awk -F: ' /^sectors\/cylinder:/ {print $2} ' $tmplabel`
 trackscylinder=`awk -F: ' /^tracks\/cylinder:/ {print $2} ' $tmplabel`
 cylinders=`awk -F: ' /^cylinders:/ {print $2} ' $tmplabel`

 rm $tmplabel
fi

# The source image must be 4GB or less, or this will break.
imgbytes=`ls -l $image | awk ' { print $5 } '`
imgsize=$((imgbytes / bytessec))

if [ $((imgsize * bytessec)) != "$imgbytes" ]; then
 cat <<-__FluxCapacitor
	size of image $image is not divisible by $bytessec bytes/sector
	without a remainder.  this image may not be compatible with
	the media that you are installing to, or, more likely, it may
	not be a disk image at all.  either way, run flashrd to create a
	new image.
	__FluxCapacitor
 exit 1
fi

addon=$((totalsize - imgsize))

echo Image: $image
echo Image size: $((imgbytes / 1024 / 1024))MB
if [ "$bytessec" -le 1024 ]; then
 # The division is done like this to keep any 32 int from overflowing in ksh
 echo Requested size: $((totalsize / 1024 / (1024 / bytessec)))MB
 echo Size increase: $((addon / 1024 / (1024 / bytessec)))MB
fi
echo

if [ -z "$alt" ]; then
 freespace=`df . | tail -1 | awk ' { print $4 } '`

 if [ $bytessec -gt 512 ]; then
  # df reports in 512 byte sectors, so scale freespace for comparison
  # to media with different bytes/sec
  factor=$((bytessec / 512))
  freespace=$((freespace / factor))
 fi

 # The new image will not take more disk space than the old one, in fact
 # it will take less.  But it will appear to use more when dd reads it.
 # vnd will create holes in the file for the blank space so we don't have
 # to waste a bunch of disk space for megabytes of zeros!
 if [ "$imgsize" -gt "$freespace" ]; then
  echo imgsize: $imgsize sectors
  echo freespace: $freespace sectors
  echo
  echo there is not enough free disk space for the new image!
  exit 1
 fi
fi

if ! vnconfig $device2 $image; then
 echo % vnconfig failure
 exit 1
fi

if [ -z "$alt" ]; then
 NewImg=`mktemp newimg.XXXXXX`
fi
NewLabel=`mktemp -t growimg.XXXXXX`
OldDir=`mktemp -t -d olddir.XXXXXX`
NewDir=`mktemp -t -d newdir.XXXXXX`

if ! mount -o rdonly /dev/"$device2"a $OldDir; then
 echo mount old image failed
 vnconfig -u $device2
 rm -rf $NewImg $NewLabel $OldDir $NewDir
 exit 1
fi

echo Reading current disklabel...
disklabel $device2 |
egrep -v "^boundstart:|^boundend:|^total sectors:|^bytes/sector:|^sectors/track:|^sectors/cylinder:|^tracks/cylinder:|^cylinders:|^  .:|^#|^. partitions:|^.. partitions:|^$" > $NewLabel

asize=$((totalsize - sectorstrack))

# This probably isn't important as of OpenBSD 4.8 because disklabel
# now ignores geometry specified by -R command.  Simply flashrd
# as much as possible in this regard. XXX
#
cat >> $NewLabel <<-EOF
	type: ESDI
	bytes/sector: $bytessec
	sectors/track: $sectorstrack
	tracks/cylinder: $trackscylinder
	sectors/cylinder: $sectorscylinder
	cylinders: $cylinders
	total sectors: $totalsize

	a: $asize   $sectorstrack   4.2BSD  1024    8192    16
	c: $totalsize 0 unused 0 0
	EOF

if [ -z "$alt" ]; then
 echo
 echo Creating new image...
 dd if=/dev/zero bs=$bytessec count=$bytessec of=$NewImg >/dev/null

 if ! vnconfig $device $NewImg; then
  echo % vnconfig failure
  vnconfig -u $device2
  rm -f $NewImg $NewLabel $OldDir $NewDir
  exit 1
 fi
fi

fdisk -c $cylinders -h $trackscylinder -s $sectorstrack -f $mbr \
  -e $device <<-__EOC >/dev/null
	reinit
	update
	write
	quit
	__EOC

echo
echo Writing flashrd disklabel...
if ! disklabel -R $device $NewLabel; then
 echo disklabel failed
 exit
fi

echo
echo Creating new filesystem...
if ! newfs -S $bytessec -q /dev/r"$device"a; then
 echo newfs failed
 exit
fi

if ! mount -o async /dev/"$device"a $NewDir; then
 echo mount new image failed
 umount $OldDir
 if [ -z "$alt" ]; then
  vnconfig -u $device
 fi
 vnconfig -u $device2
 rm -f $NewImg $NewLabel $OldDir $NewDir
 exit 1
fi

UsedBlocks=`df $OldDir | tail -1 | awk ' { print $3 } '`
FreeBlocks=`df $NewDir | tail -1 | awk ' { print $4 } '`

if [ "$FreeBlocks" -le "$UsedBlocks" ]; then
  cat <<-__UsedBlocks

	Binaries use $((UsedBlocks / 1024 / (1024 / bytessec)))MB but only
	$((FreeBlocks / 1024 / (1024 / bytessec)))MB available for hip-hop
	verbal potential.  Sorry, you must specify a larger destination size.
	__UsedBlocks
  umount $OldDir
  umount $NewDir
  if [ -z "$alt" ]; then
   vnconfig -u $device
  fi
  vnconfig -u $device2
  rm -f $NewImg $NewLabel
  rmdir $OldDir $NewDir
  exit 1
fi

echo
echo Copying installation...
tar cf - -C $OldDir . | tar xpf - -C $NewDir

echo
echo Installing boot blocks...
/usr/mdec/installboot $NewDir/boot $biosboot $device

echo
echo Checking filesystem...
fsck -f /dev/"$device"a

umount /dev/"$device"a
umount /dev/"$device2"a

if [ -z "$alt" ]; then
 vnconfig -u $device
fi
vnconfig -u $device2

if [ "$bytessec" -le 1024 ]; then
 new="$((totalsize / 1024 / (1024 / bytessec)))MB "
fi
echo
echo Grow completed.
if [ -z "$alt" ]; then
 echo New "$new"image is located at $NewImg
else
 echo "New image written to ${device}(${alt})"
fi
echo

rm -r $NewDir $OldDir
rm $NewLabel

exit 0
